+dk elens

module elens
  use parpro
  use floatPrecision
  implicit none
  
!     M. Fitterer, FNAL, A. Mereghtti, CERN
!     last modified: 09-02-2018
!     Common block for electron lens definition

      ! size of table with elens data
      integer, parameter     :: nelens=100
      ! last elens read
      integer, save          :: melens

      ! index of elens:
      integer, save          :: ielens(nele)
      
      ! variables to save elens parameters for tracking etc.
      integer, save          :: elens_type(nelens)      ! integer for elens type
                                                          ! 0 : Un-initialized.
                                                          ! 1 : Hollow annular elens, uniform profile
      real(kind=fPrec), save :: elens_theta_r2(nelens)    ! kick strength at R2 [mrad]
      real(kind=fPrec), save :: elens_r2(nelens)          ! outer radius R2 [mm]
      real(kind=fPrec), save :: elens_r1(nelens)          ! inner radius R1 [mm]
      real(kind=fPrec), save :: elens_offset_x(nelens), elens_offset_y(nelens)  ! hor./vert. offset of elens [mm]
      real(kind=fPrec), save :: elens_sig(nelens)         ! sig (Gaussian profile) [mm]
      real(kind=fPrec), save :: elens_geo_norm(nelens)    ! normalisation of f(r)
      real(kind=fPrec), save :: elens_len(nelens)         ! length of eLens (e-beam region) [m]
      real(kind=fPrec), save :: elens_I(nelens)           ! current of e-beam [A]
      real(kind=fPrec), save :: elens_Ek(nelens)          ! kinetic energy of e-beam [keV]
      integer, save          :: elens_iCheby(nelens)      ! mapping to the table with chebyshev coeffs
      real(kind=fPrec), save :: elens_angle(nelens)       ! angle for getting the real bends [deg]
!     file with chebyshev coefficients
      integer, parameter     :: nelens_cheby_tables=20    ! number of tables with chebyshev coefficients
      integer, parameter     :: elens_cheby_unit=107      ! unit for reading the chebyshev coefficients
      integer, parameter     :: elens_cheby_order=18      ! max order of chebyshev polynomials
      integer, save          :: melens_cheby_tables       ! tables available in memory
      character(len=16), save:: elens_cheby_filename(nelens_cheby_tables) ! names
      real(kind=fPrec), save :: elens_cheby_coeffs(0:elens_cheby_order,0:elens_cheby_order,nelens_cheby_tables)
      real(kind=fPrec), save :: elens_cheby_refCurr(nelens_cheby_tables) ! reference current [A]
      real(kind=fPrec), save :: elens_cheby_refRadius(nelens_cheby_tables) ! reference radius [mm]
      real(kind=fPrec), save :: elens_cheby_refBeta(nelens_cheby_tables) ! reference e-beta []


    contains


      subroutine elens_kick(ielens)

        ! M. Fitterer, FNAL, and A. Mereghetti, CERN
        ! last modified: 20-02-2018
        ! apply kick of electron lens
        
        use crcoall
        use mod_common
        use mod_commonmn
        use mathlib_bouncer
        use numerical_constants
        
        real(kind=fPrec) :: xx, yy, rr, frr, dxp, dyp
        real(kind=fPrec) :: theta, radio, angle_rad
        integer          :: j, ielens
        logical          :: lrotate
        
        ! rotation angle
        lrotate=elens_angle(j).ne.zero
        if (lrotate) angle_rad=elens_angle(ielens)/c180e0*pi
        
        do j=1,napx
           
           ! 1) apply offset of e-lens
           !    xx = x(proton) -elens_offset_x
           !    yy = y(proton) -elens_offset_y
           xx=xv(1,j)-elens_offset_x(ielens)
           yy=xv(2,j)-elens_offset_y(ielens)
           
           ! 2) calculate radius
           !    radius of particle in p-beam relative to center of elens beam
           !    -> internal parameters to calculate kick:
           !    rr = sqrt(xx**2+yy**2)
           rr=sqrt(xx**2+yy**2)
           ! 3) calculate kick
           !    shape function: spatial charge density depends on type:
           !    0        if r < R1
           !    frr if R1 < r < R2
           !    1        if r > R2
           
           if (rr.gt.elens_r1(ielens)) then ! rr <= r1 -> no kick from elens
              
              ! in case elens has a non-zero angle, rotate coordinates
              if (lrotate) then
                 ! NB: elens_angle(ielens) is the rotation angle of the elens
                 theta = atan2_mb(yy, xx)-angle_rad
                 xx = rr * cos_mb(theta)
                 yy = rr * sin_mb(theta)
              end if
              
              if (rr.lt.elens_r2(ielens)) then ! r1 < rr < r2
                 select case (elens_type(ielens))
                 case (1)
                    ! UNIFORM: eLens with uniform profile
                    ! formula: (r^2-r1^2)/(r2^2-r1^2)
                    ! NB: take into account negative charge!
                    frr=-( (rr+elens_r1(ielens))*(rr-elens_r1(ielens)) )/elens_geo_norm(ielens)
                 case (2)
                    ! GAUSSIAN: eLens with Gaussian profile
                    ! formula: (exp(-r1^2/2sig^2)-exp(-r^2/2sig^2))/(exp(-r1^2/2sig^2)-exp(-r2^2/2sig^2))
                    ! NB: take into account negative charge!
                    frr=-( exp_mb(-0.5*(elens_r1(ielens)/elens_sig(ielens))**2)    &
                          -exp_mb(-0.5*(rr              /elens_sig(ielens))**2) )/ &
                          elens_geo_norm(ielens)
                 case (3)
                    ! CHEBYSHEV polynomial
                    call elens_applyChebyshev( xx, yy, dxp, dyp, elens_iCheby(ielens) )
                 end select
              else ! r1 < r2 <= rr
                 select case (elens_type(ielens))
                 case (:2)
                    frr=one
                 case (3)
                    write(lout,*) 'ERROR in elens_kick: particle at position (x,y,r): ',     &
                         xv(1,j), xv(2,j), rr,' outside radial domain of Chebyshev polinomials: ', &
                         elens_cheby_refRadius(elens_iCheby(ielens))
                    call prror(-1) 
                 end select
              endif
              if ( elens_type(ielens).ne.3 ) then
                 ! get actual kicks from frr
                 frr = elens_r2(ielens)/rr *frr *elens_theta_r2(ielens) *oidpsv(j)
                 dxp = frr*xx/rr
                 dyp = frr*yy/rr
              end if
              
              ! in case elens has a non-zero angle, rotate kicks
              if (lrotate) then
                 ! NB: elens_angle(ielens) is the rotation angle of the elens
                 theta = atan2_mb(dyp, dxp)+angle_rad
                 radio = sqrt(dxp**2 + dyp**2)
                 dxp = radio * cos_mb(theta)
                 dyp = radio * sin_mb(theta)
              end if

              ! apply kicks
              yv(1,j)=yv(1,j)+dxp
              yv(2,j)=yv(2,j)+dyp
           endif
        end do
        return
        
      end subroutine elens_kick
      
      
      subroutine elens_comnul
        
        ! M. Fitterer (FNAL), A. Mereghetti
        ! last modified: 09-02-2018
        ! always in main code
        
        ! elensparam - used for tracking (parameters of single element)
        
        use mod_common
        use mod_commonmn
        use numerical_constants
        
        integer          :: i, j, i1, i2
        
        do i=1,nele
           ielens(i) = 0
        end do
        melens=0
        do i=1,nelens
           elens_type(i)          = 0
           elens_theta_r2(i)      = zero
           elens_r2(i)            = zero
           elens_r1(i)            = zero
           elens_offset_x(i)      = zero
           elens_offset_y(i)      = zero
           elens_sig(i)           = zero
           elens_geo_norm(i)      = zero
           elens_len(i)           = zero
           elens_I(i)             = zero
           elens_Ek(i)            = zero
           elens_iCheby(i)        = 0
           elens_angle(i)         = zero
        end do
        ! table with coefficients of chebyshev polynominals
        do i=1,nelens_cheby_tables
           do j=1,16
              elens_cheby_filename(i)(j:j)=' '
           end do
           do i1=0,elens_cheby_order
              do i2=0,elens_cheby_order
                 elens_cheby_coeffs(i1,i2,i)=zero
              end do
           end do
           elens_cheby_refCurr(i)=zero
           elens_cheby_refBeta(i)=zero
           elens_cheby_refRadius(i)=zero
        end do
        return
      end subroutine elens_comnul
      
      
      real(kind=fPrec) function elens_theta( len, Int, Ekin, Etot, r2 )
        
        ! A.Mereghetti, BE-ABP-HSS
        ! last modified: 2018-02-21
        ! always in main code
         
        ! compute eLens theta at r2
        ! input variables:
        ! - length of eLens [m];
        ! - current intensity of e-beam [A]
        ! - kinetic energy of electrons [keV]
        ! - total beam energy [MeV]
        ! - outer radius [mm]
        
        use mathlib_bouncer
        use physical_constants
        use crcoall
        use mod_common
        use numerical_constants
        
        real(kind=fPrec) gamma, beta_e, beta_b, brho, len, Int, Ekin, Etot, r2
        gamma=Ekin*c1m3/pmae+1 ! from kinetic energy
        beta_e=sqrt((gamma+one)*(gamma-one))/(gamma)
        gamma=Etot/pma ! from total energy
        beta_b=sqrt((gamma+one)*(gamma-one))/(gamma)
        brho=Etot/(clight*c1m6)
        ! r2: from mm to m
        ! theta: from rad to mrad
        elens_theta=len*abs(Int)/(2*pi*eps0*brho*clight**2*r2*c1m3)*c1e3
        if ( Int.lt.zero ) then
           elens_theta=elens_theta*(one/(beta_e*beta_b)+one)
        else
           elens_theta=elens_theta*(one/(beta_e*beta_b)-one)
        end if
      end function elens_theta
      
      
      subroutine elens_parseChebyFile(ifile)
        
        ! A.Mereghetti, BE-ABP-HSS
        ! last modified: 2018-02-21
        ! always in main code
        
        ! read file with coefficients for chebyshev polynomials
        ! ifile is index of file in table of chebyshev files        
        ! file is structured as:
        !    keyword : value
        ! keywords:
        ! - I: reference current intensity of e-beam [A]
        ! - Ek: reference kinetic energy of electrons [keV]
        ! - rad: reference radius [mm]
        ! comment line is headed by '#'
        ! coefficients are give with the following syntax:
        ! i j : value
        ! where i->x and j->y
        
        use mathlib_bouncer
        use physical_constants
        use crcoall
        use mod_common
        use numerical_constants
        
+ca comgetfields
        character(len=160) string
        integer ierr, ii, jj, ifile, errno
        real(kind=fPrec) tmpflt, beta, gamma, round_near
        
        ierr=0
        write(lout,*)' Parsing file with coefficients for Chebyshev polynomials ' &
             //elens_cheby_filename(ifile)
        open(elens_cheby_unit,file=elens_cheby_filename(ifile),status='old')
        do while (.true.)
           read(elens_cheby_unit,'(A)',end=1982,err=1983) string
           if (string(1:1).ne.'#') then
              call getfields_split( string, getfields_fields, getfields_lfields, &
                   getfields_nfields, getfields_lerr )
              if ( getfields_lerr ) then
                 ierr=1
                 goto 1983
              end if
              if (string(1:1).eq.'I') then
                 ! read reference current of e-beam in e-lens
                 if (getfields_nfields.lt.3) then
                    ierr=2
                    goto 1983
                 end if
+if .not.crlibm
                 read (getfields_fields(3)(1:getfields_lfields(3)),*) tmpflt
+ei
+if crlibm
                 tmpflt=round_near(errno,getfields_lfields(3)+1,getfields_fields(3))
                 if (errno.ne.0) call rounderr (errno,getfields_fields,3,tmpflt)
+ei
                 elens_cheby_refCurr(ifile)=tmpflt
                  
              elseif (string(1:2).eq.'Ek') then
                 ! read reference kinetic energy of e-beam in e-lens
                 if (getfields_nfields.lt.3) then
                    ierr=3
                    goto 1983
                 end if
+if .not.crlibm
                 read (getfields_fields(3)(1:getfields_lfields(3)),*) tmpflt
+ei
+if crlibm
                 tmpflt=round_near(errno,getfields_lfields(3)+1,getfields_fields(3))
                 if (errno.ne.0) call rounderr (errno,getfields_fields,3,tmpflt)
+ei
                 gamma=tmpflt*c1m3/pmae+1 ! from kinetic energy
                 elens_cheby_refBeta(ifile)=sqrt((gamma+one)*(gamma-one))/(gamma)
                  
              elseif (string(1:3).eq.'rad') then
                 ! read reference radius e-beam in e-lens
                 if (getfields_nfields.lt.3) then
                    ierr=4
                    goto 1983
                 end if
+if .not.crlibm
                 read (getfields_fields(3)(1:getfields_lfields(3)),*) tmpflt
+ei
+if crlibm
                 tmpflt=round_near(errno,getfields_lfields(3)+1,getfields_fields(3))
                 if (errno.ne.0) call rounderr (errno,getfields_fields,3,tmpflt)
+ei
                 elens_cheby_refRadius(ifile)=tmpflt
                 ! force R1 and R2 to be the extremes of the domain of Chebyshev polynomials:
                 do ii=1,melens
                    if (elens_iCheby(ii).eq.ifile) then
                       elens_r1(ii)=zero
                       elens_r2(ii)=elens_cheby_refRadius(ifile)
                       write(lout,*) ' -> forcing R1 and R2 of elens # ',ii, ' to ',elens_r1(ii),' and ',elens_r2(ii),' mm'
                    end if
                 end do
               
              else
                 ! read chebyshev coefficients
                 if (getfields_nfields.ne.4) then
                    ierr=5
                    goto 1983
                 end if
                 read (getfields_fields(1)(1:getfields_lfields(1)),*) ii
                 if (ii.gt.elens_cheby_order) then
                    ierr=6
                    goto 1983
                 end if
                 read (getfields_fields(2)(1:getfields_lfields(2)),*) jj
                 if (jj.gt.elens_cheby_order) then
                    ierr=7
                    goto 1983
                 end if
+if .not.crlibm
                 read (getfields_fields(4)(1:getfields_lfields(4)),*) tmpflt
+ei
+if crlibm
                 tmpflt=round_near(errno,getfields_lfields(4)+1,getfields_fields(4))
                 if (errno.ne.0) call rounderr (errno,getfields_fields,4,tmpflt)
+ei
                 elens_cheby_coeffs(ii,jj,ifile)=tmpflt
              end if ! close if for keyword identification
           end if ! close if for non-comment chars
        end do
1983    write(lout,*) 'ERROR ',ierr,' while parsing file '//elens_cheby_filename(ifile)
        call prror(-1)
1982    close(elens_cheby_unit)
        
        ! echo parsed data
        write(lout,fmt='(/,A,1X,I4)') ' Coefficients for Chebyshev polynomials as from file ' &
             //elens_cheby_filename(ifile)//' - #',ifile
        write(lout,fmt='(A,1X,1PE10.3)') ' - reference current [A]:',elens_cheby_refCurr(ifile)
        write(lout,fmt='(A,1X,1PE10.3)') ' - reference beta     []:',elens_cheby_refBeta(ifile)
        write(lout,fmt='(A,1X,1PE10.3)') ' - reference radius [mm]:',elens_cheby_refRadius(ifile)
        do ii=0,elens_cheby_order
           do jj=0,elens_cheby_order
              if (elens_cheby_coeffs(ii,jj,ifile).ne.zero) then
                 write(lout,fmt='(2(1X,I4)," : ",1PE10.3)') ii,jj,elens_cheby_coeffs(ii,jj,ifile)
              end if
           end do
        end do
        
      end subroutine elens_parseChebyFile

      subroutine elens_applyChebyshev( xx, yy, dxp, dyp, iCheby )

        ! A. Mereghetti, CERN BE/ABP/HSS
        ! last modified: 21-02-2018
        ! compute kicks from Chebyshev polinomials
        
        use mathlib_bouncer
        use numerical_constants

        real(kind=fPrec) :: xx, yy, dxp, dyp
        integer          :: iCheby

        dxp=zero
        dyp=zero
        
      end subroutine elens_applyChebyshev
      
    end module elens
     
