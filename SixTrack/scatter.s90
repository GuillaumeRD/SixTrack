+dk scatter
!     Deck for the scattering routines implemented in the SCATTER block

      subroutine scatter_dumpdata
      implicit none
+ca crcoall
+ca parpro      
+ca stringzerotrim
+ca comscatter

      integer ii,jj
      
      write(lout,'(a)') "*** BEGIN SCATTER DUMP ***"

      write(lout,'(a)') "Options:"
      write(lout,*)     "scatter_debug =", scatter_debug

      write(lout,'(a)') "Arrays:"
      write(lout,*) "scatter_ELEM: (",                                  &
     &     scatter_nELEM,",",scatter_maxGenELEM,"):"
      do ii=1, scatter_nELEM
         write(lout,*) ii, ":", scatter_ELEM(ii,:)
      end do

      write(lout,*) "scatter_PROFILE: (",                               &
     &     scatter_nPROFILE,",",5,"):"
      do ii=1, scatter_nPROFILE
         write(lout,*) ii, ":", scatter_PROFILE(ii,:)
      end do

      write(lout,*) "scatter_GENERATOR: (",                             &
     &     scatter_nGENERATOR,",",5,"):"
      do ii=1, scatter_nGENERATOR
         write(lout,*) ii, ":", scatter_GENERATOR(ii,:)
      end do

      write(lout,*) "scatter_idata: (",scatter_nidata,"):"
      do ii=1, scatter_nidata
         write(lout,*) ii, ":", scatter_idata(ii)
      end do
      
      write(lout,*) "scatter_fdata: (",scatter_nfdata,"):"
      do ii=1, scatter_nfdata
         write(lout,*) ii, ":", scatter_fdata(ii)
      end do

      write(lout,*) "scatter_cdata: (",scatter_ncdata,"):"
      do ii=1, scatter_ncdata
         write(lout,*) ii, ": '"//                                      &
     &        trim(stringzerotrim(scatter_cdata(ii)))//"'"
      end do

      write(lout,'(a)') "***** END SCATTER DUMP ***"
      
      end subroutine

      subroutine scatter_thin(ix)
      implicit none
+ca crcoall
+ca parpro
+ca stringzerotrim
+ca comscatter

+ca common
+ca commonmn
!     Define functions
      double precision scatter_profile_getDensity
      double precision scatter_generator_getCrossSection
      
!     Temp variables
      integer ELEMidx,PROidx,GENidx
      integer i,j
      double precision s,t,xi
      double precision crossSection,N,P
!     Input
      integer, intent(in) :: ix
      
      ELEMidx = scatter_elemPointer(ix)
      PROidx = scatter_ELEM(ELEMidx,2)
      
      !Compute the "standard" s (used for cross-sections)
      !(ask profile for the p)
      
      !Loop over generators
      do i=3,scatter_maxGenELEM
         GENidx = scatter_ELEM(ELEMidx,i)
         
         
         do j=1, napx
            ! Compute the cross-section at this s
            ! (in most cases rougly equal for all particles; use mean x,y,xp,yp,E)
            crossSection = scatter_generator_getCrossSection            &
     &           ( PROidx,GENidx, xv(1,j),xv(2,j),                      &
     &           yv(1,j),yv(2,j),ejv(j) )
            
            ! Ask profile for density at x,y
            N = scatter_profile_getDensity(PROidx,xv(1,j),xv(2,j))
            
            ! Compute probability P
            P = N*crossSection
            ! If RNG < P -> scatter; else go to next particle
            if (RAND(0) .le. P) then ! Was .gt., but pseudo code says .lt.
               cycle
            endif
            
!     Ask generator for t and xi

!     Use generator t and xi to update particle j;
!     remember to update ALL the energy arrays
            
!     Output to file
         end do
      end do
      end subroutine

      double precision function scatter_profile_getDensity              &
     &     (profileIdx, x,y) result(retval)
      implicit none
+ca crcoall
+ca parpro
+ca stringzerotrim
+ca comscatter

      integer, intent(in) :: profileIdx
      double precision, intent(in) :: x,y
      
      select case (scatter_PROFILE(profileIdx,2))
      case (1)                 ! FLAT
         retval =                                                       &
     &        scatter_fdata(scatter_PROFILE(profileIdx,3))
      !case (10)                ! GAUSS1
         ! TODO
      case default
         write(lout,*) "SCATTER> ERROR in profile_getDensity"
         write(lout,*) "Type", scatter_PROFILE(profileIdx,2),           &
     &        "for profile '"// trim(stringzerotrim(                    &
     &        scatter_cdata(scatter_PROFILE(profileIdx,1))              &
     &        ))//"' not understood."
         call prror(-1)
      end select
      
      end function

      subroutine scatter_profile_getParticle                            &
     &     (profileIdx, x,y, xp,yp,E)
      implicit none
      integer, intent(in) :: profileIdx
      double precision, intent(in) :: x,y
      double precision, intent(out) :: xp,yp,E

!     Return a particle to collide with

      end subroutine
      
      double precision function scatter_generator_getCrossSection       &
     &     (profileIDX, generatorIDX, x,y, xp, yp, E)
      implicit none
+ca crcoall
+ca parpro
+ca stringzerotrim
+ca comscatter

      integer, intent(in) :: profileIDX, generatorIDX
      double precision, intent(in) :: x,y,xp,yp,E
!     Temp variables
      double precision xp_target, yp_target, E_target
      
      
!     Calculate S
      call scatter_profile_getParticle                                  &
     &     (profileIDX, x,y, xp_target,yp_target,E_target)

!     Calculate the crossection as function of S
      select case (scatter_PROFILE(profileIdx,2))
      case (1)                  ! FLAT
! TODO
      case default
         write(lout,*) "SCATTER> "//                                    &
     &        "ERROR in scatter_generator_getCrossSection"
         write(lout,*) "Type", scatter_PROFILE(profileIdx,2),           &
     &        "for profile '"// trim(stringzerotrim(                    &
     &        scatter_cdata(scatter_PROFILE(profileIdx,1))              &
     &        ))//"' not understood."
         call prror(-1)
      end select

      end function

      subroutine scatter_generator_getTandXi                            &
     &     (generatorIDX)
      implicit none
+ca crcoall

!     Could be affected by S as well?

      integer, intent(in) :: generatorIDX
      
      select case(generatorIDX)
      case (1)                  ! ABSORBER
!...  
      case (10)                 ! PPBEAMELASTIC
!...  
      case default
         write(lout,*) "SCATTER> "//                                    &
     &        "ERROR in scatter_generator_getTandXi"
         write(lout,*) "Type", generatorIDX,                            &
     &        "not understood"
         call prror(-1)
      end select
         
      end subroutine
